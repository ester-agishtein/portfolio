{"version":3,"sources":["Api.js","Api-Info.js","Lama.js","LamaInfo.js","App.js","serviceWorker.js","index.js"],"names":["App","props","createButtons","ix","Object","keys","state","data","length","buttons","push","name","_id","displayInfo","id","setState","fetch","then","response","json","info","width","height","updateWindowDimensions","bind","this","window","addEventListener","removeEventListener","innerWidth","innerHeight","className","style","fontFamily","Jumbotron","fluid","Container","textAlign","display","justifyContent","position","marginLeft","map","list","Button","onClick","weapon","profession","affiliation","undefined","photoUrl","alt","src","Component","ApiInfo","exact","path","process","Col","href","to","color","fontSize","bsPrefix","Api","Sound","require","default","Lama","pokeLama","handPos","play","setTimeout","lamaPos","text","mp3","right","top","url","playStatus","LamaInfo","React","Boolean","location","hostname","match","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb7746a4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\n\nimport \"./App.css\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {},\n      id: \"\",\n      info: {},\n      buttons: [],\n\n      width: 0,\n      height: 0\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n    fetch(\n      \"https://last-airbender-api.herokuapp.com/api/v1/characters?perPage=500\"\n    )\n      .then(response => response.json())\n      .then(json => this.setState({ data: json }));\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n\n  createButtons = () => {\n    for (var ix = 0; ix < Object.keys(this.state.data).length; ix++) {\n      this.state.buttons.push([\n        this.state.data[ix].name,\n        this.state.data[ix]._id\n      ]);\n    }\n  };\n  displayInfo = id => {\n    this.setState({ id: id }, () => {\n      var url =\n        \"https://last-airbender-api.herokuapp.com/api/v1/characters/\" + id;\n\n      fetch(url)\n        .then(response => response.json())\n        .then(json => this.setState({ info: json }));\n    });\n  };\n  render() {\n    return (\n      <div\n        className=\"apiBody\"\n        style={{\n          fontFamily: \"Lucida Console, Courier , monospace\",\n          width: window.innerWidth,\n          height: window.innerHeight\n        }}\n      >\n        <Jumbotron fluid>\n          <Container className=\"container\">\n            <div style={{ textAlign: \"center\" }}>\n              <h1>Avatar the Last Airbender Database</h1>\n              <h5>Click on a character to find out more about them.</h5>\n            </div>\n          </Container>\n        </Jumbotron>\n        {this.createButtons()}\n\n        <div\n          className=\"body\"\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-evenly\"\n          }}\n        >\n          <div className=\"charecters\">\n            <div\n              className=\"header\"\n              style={{ position: \"absolute\", marginLeft: \"2vw\" }}\n            >\n              <h2>Charecter Names: </h2>\n            </div>\n            <div className=\"buttons\">\n              <ul>\n                {this.state.buttons.map(list => (\n                  <li>\n                    <Button onClick={() => this.displayInfo(list[1])}>\n                      {list[0]}\n                    </Button>\n                  </li>\n                ))}\n              </ul>\n            </div>\n          </div>\n          <div className=\"apiInfo\">\n            <div className=\"charInfo\">\n              <h2>Character Information: </h2>\n              Name: {this.state.info.name}\n              <br />\n              Weapon: {this.state.info.weapon}\n              <br />\n              Profession: {this.state.info.profession}\n              <br />\n              Position: {this.state.info.profession}\n              <br />\n              Affiliation: {this.state.info.affiliation}\n              <br />\n              <div\n                style={{\n                  position: \"relative\",\n                  marginLeft: \"15%\"\n                }}\n              >\n                {this.state.info.photoUrl === undefined ? (\n                  <div></div>\n                ) : (\n                  <img alt=\"charecter\" src={this.state.info.photoUrl} />\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport Api from \"./Api\";\nclass ApiInfo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div className=\"project-template\">\n        <BrowserRouter>\n          <Route exact path={process.env.PUBLIC_URL + \"/Air-Bender-Api-Info\"}>\n            <Col className=\"project-col\">\n              <h1 className=\"project-name\">\n                Avatar the Last Airbender Database\n              </h1>\n              <img\n                className=\"project-img\"\n                alt=\"apiImg\"\n                src={process.env.PUBLIC_URL + \"/apiImg.png\"}\n              />\n              <p className=\"apiInfoText\">\n                The Avatar the Last Airbender Database is a React front-end for\n                the{\" \"}\n                <a href=\"https://last-airbender-api.herokuapp.com/\">\n                  Last Airbender API\n                </a>\n                , created by Paige Gorry. Using a combination of fetch calls and\n                the map function, the code dynamically creates buttons for all\n                of the shows characters and populates the information box when\n                the corresponding button is clicked.\n              </p>\n              <h2>The Code</h2>\n\n              <h5 className=\"apiInfoText\">\n                The code has two main parts. The creation of the buttons and the\n                retrieving and displaying of the character data.\n              </h5>\n              <h3>\n                <strong>Button Creation</strong>\n              </h3>\n              <p className=\"apiInfoText\">\n                In componentDidMount, the code calls to the API and collects all\n                the character names. The API returns a JSON object. The code\n                then sets the data object in the state to be the JSON object.{\" \"}\n              </p>\n\n              <img\n                className=\"project-img\"\n                alt=\"compoDidMnt\"\n                src={process.env.PUBLIC_URL + \"/compoDidMnt.png\"}\n              />\n\n              {/* <a href=\"https://github.com/ester-agishtein/portfolio/blob/1613e8b439cda3301df9ce95ea1cda358366d424/src/Game.js#L8-L54\">\n                {\" \"}\n                (Click here to view the whole code on GitHub).{\" \"}\n              </a> */}\n              <p className=\"apiInfoText\">\n                Then in the create buttons function, the names of all the\n                characters are collected and pushed into the buttons array.{\" \"}\n              </p>\n\n              <img\n                className=\"project-img\"\n                alt=\"buttons\"\n                src={process.env.PUBLIC_URL + \"/createButtonsFnc.png\"}\n              />\n              {/* <a href=\"https://github.com/ester-agishtein/portfolio/blob/1613e8b439cda3301df9ce95ea1cda358366d424/src/Game.js#L85-L132\">\n                {\" \"}\n                (Click here to view the whole code on GitHub).{\" \"}\n              </a> */}\n\n              <p className=\"apiInfoText\">\n                Finally, in the render function, I used the map function to map\n                the buttons array. I used the names of the characters as the\n                text for the buttons and passed the character id’s to the\n                onclick function for latter use.{\" \"}\n              </p>\n              <img\n                className=\"project-img\"\n                alt=\"map\"\n                src={process.env.PUBLIC_URL + \"/map.png\"}\n              />\n              <h3>\n                <strong>Populating the Information Box </strong>\n              </h3>\n              <p className=\"apiInfoText\">\n                To get the character information, I created the displayInfo\n                method. This method is called in the onClick in the render\n                method. It takes the character’s id as an argument. The method\n                then manipulates the URL to ask for that characters information.\n                Finally, the variable called info in the component’s state is\n                set to the returned JSON object. Info is then parsed in the\n                render method to display the correct information.\n              </p>\n              <img\n                className=\"project-img\"\n                alt=\"info\"\n                src={process.env.PUBLIC_URL + \"/displayInfo.png\"}\n              />\n\n              <Link\n                to={process.env.PUBLIC_URL + \"/Air-Bender-Api-Info/Api\"}\n                style={{\n                  color: \"black\",\n                  fontSize: \"10vw\"\n                }}\n              >\n                Try it Yourself!\n              </Link>\n            </Col>\n          </Route>\n\n          <Route path={process.env.PUBLIC_URL + \"/Air-Bender-Api-Info/Api\"}>\n            <div className=\"app\">\n              <Col bsPrefix=\"componentCol\">\n                <Api />\n              </Col>\n            </div>\n          </Route>\n\n          <Link\n            to={process.env.PUBLIC_URL + \"/Air-Bender-Api-Info\"}\n            style={{ color: \"black\" }}\n          ></Link>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default ApiInfo;\n","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nvar Sound = require(\"react-sound\").default;\n\nclass Lama extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 0,\n      height: 0,\n      handPos: \"65vw\",\n      lamaPos: \"0vw\",\n      text: \"Oooo Poke the Lamaaa!\",\n      play: \"PLAYING\",\n      mp3: process.env.PUBLIC_URL + \"/whatUp.mp3\"\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  componentDidMount() {\n    this.updateWindowDimensions();\n    window.addEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions() {\n    this.setState({ width: window.innerWidth, height: window.innerHeight });\n  }\n  //updates window.innerwidth and height\n\n  pokeLama = () => {\n    // we are in starting position\n    if (this.state.handPos === \"65vw\") {\n      this.setState({\n        handPos: \"17vw\",\n        play: \"PAUSED\"\n      });\n      window.setTimeout(() => {\n        this.setState({\n          lamaPos: \"-50vw\",\n          text: \"Oh no! Come back lama!\",\n          mp3: process.env.PUBLIC_URL + \"/scream.mp3\",\n          play: \"PLAYING\",\n          play: \"PAUSED\",\n          play: \"PLAYING\"\n        });\n      }, 550);\n    } else {\n      // hand pokes lama\n      this.setState({\n        handPos: \"65vw\",\n        mp3: process.env.PUBLIC_URL + \"/whatUp.mp3\",\n        lamaPos: \"0vw\",\n        text: \"Oooo Poke the Lamaaa!\",\n        play: \"PLAYING\",\n        play: \"PAUSED\",\n        play: \"PLAYING\"\n      });\n    }\n  };\n  render() {\n    return (\n      <>\n        <div className=\"lamaGame\">\n          <div className=\"lamaText\">\n            <h1>Welcome to Poke A Lama</h1>\n            <h2>Click the hand to poke the lama.</h2>\n            {this.state.text}\n          </div>\n\n          <Button bsPrefix=\"lamaButton\" onClick={this.pokeLama}>\n            <div\n              style={{\n                right: this.state.handPos,\n                top: \"50%\"\n              }}\n              className=\"moving-img\"\n            >\n              <img\n                src={process.env.PUBLIC_URL + \"/hand.png\"}\n                width=\"80%\"\n                alt=\"hand\"\n              />\n            </div>\n          </Button>\n\n          <div\n            style={{ right: this.state.lamaPos, top: \"30%\" }}\n            className=\"moving-img\"\n          >\n            <img src={process.env.PUBLIC_URL + \"/lama.png\"} alt=\"lama\" />\n          </div>\n          <Sound url={this.state.mp3} playStatus={this.state.play} />\n        </div>\n      </>\n    );\n  }\n}\nexport default Lama;\n","import React, { Component } from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport Lama from \"./Lama\";\nclass LamaInfo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n  render() {\n    return (\n      <div className=\"project-template\">\n        <BrowserRouter>\n          <Route exact path={process.env.PUBLIC_URL + \"/Poke-A-Lama-Info\"}>\n            <Col className=\"project-col\">\n              <h1 className=\"project-name\">Poke A Lama</h1>\n              <img\n                className=\"project-img\"\n                alt=\"scrnShot\"\n                src={process.env.PUBLIC_URL + \"/lamaScreenShot.png\"}\n              />\n              <p>\n                Lamas. Fluffy, dopey, and just so pokable. This thought is what\n                inspired me to make the Poke A Lama game. The directive of the\n                game is to poke the cartoon lama and hear it scream by clicking\n                on the hand. For me, learning how to make the objects move and\n                produce noise was a new arena. To make the images dynamic, I\n                played around with using CSS transitions and setting the new\n                coordinates through inline styles. For sound, I used the React\n                library – react-sound – to render the mp3 files as a React\n                component. Thus, when you poke the lama, you get to hear him\n                scream.\n              </p>\n              <h2>The Code</h2>\n\n              <p>\n                The project can be broken down into two main parts. The CSS and\n                the pokeLama function. The CSS uses the transition property to\n                allow the image to move smoothly when its coordinates are\n                updated.\n              </p>\n\n              <img\n                className=\"project-img\"\n                alt=\"css\"\n                src={process.env.PUBLIC_URL + \"/lamaCSS.png\"}\n              />\n\n              <a href=\"https://github.com/ester-agishtein/portfolio/blob/1613e8b439cda3301df9ce95ea1cda358366d424/src/App.css#L120-L123\">\n                {\" \"}\n                (Click here to view the whole code on GitHub).{\" \"}\n              </a>\n              <p>\n                The coordinates get updated in the pokeLama function when the\n                hand (acting as a button) is clicked. PokeLama also initiates\n                the sound component to play the corresponding mp3 files.\n              </p>\n\n              <img\n                className=\"project-img\"\n                alt=\"poke\"\n                src={process.env.PUBLIC_URL + \"/lamaPoke.png\"}\n              />\n              <a href=\"https://github.com/ester-agishtein/portfolio/blob/1613e8b439cda3301df9ce95ea1cda358366d424/src/Lama.js#L34-L63\">\n                (Click here to view the whole code on GitHub).\n              </a>\n              <p>\n                Now that you know the secrets behind Poke A Lama, it’s time for\n                a crucial question.\n                <br />\n                Do you dare to poke the lama?\n              </p>\n\n              <Link\n                to={process.env.PUBLIC_URL + \"/Poke-A-Lama-Info/Game\"}\n                style={{\n                  color: \"black\",\n                  fontSize: \"10vw\"\n                }}\n              >\n                Poke the Lama!\n              </Link>\n            </Col>\n          </Route>\n\n          <Route path={process.env.PUBLIC_URL + \"/Poke-A-Lama-Info/Game\"}>\n            <div className=\"app\">\n              <Col bsPrefix=\"componentCol\">\n                <Lama />\n              </Col>\n            </div>\n          </Route>\n\n          <Link\n            to={process.env.PUBLIC_URL + \"/Poke-A-Lama-Info/\"}\n            style={{ color: \"black\" }}\n          ></Link>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default LamaInfo;\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport ApiInfo from \"./Api-Info\";\nimport LamaInfo from \"./LamaInfo\";\nimport Col from \"react-bootstrap/Col\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <BrowserRouter>\n          <Route path={process.env.PUBLIC_URL + \"/Poke-A-Lama-Info\"}>\n            <LamaInfo />\n          </Route>\n\n          <Route path={process.env.PUBLIC_URL + \"/Air-Bender-Api-Info\"}>\n            <ApiInfo />\n          </Route>\n          <Route exact path={process.env.PUBLIC_URL + \"/\"}>\n            <Col bsPrefix=\"componentCol\">\n              <div className=\"appBody\">\n                <h1>Ester S. Agishtein</h1>\n                <br />\n                <p>\n                  I am senior C.S student at Touro college.\n                  I have worked primarily with React\n                  and am interested in full-stack development.\n                  I am fascinated by the media industry, and am\n                  passionate about the development of technology which\n                  contributes to storytelling and human connection.\n                </p>\n                <h1>Projects</h1>\n                <hr style={{ width: \"20%\" }} />\n                <hr style={{ width: \"40%\" }} />\n                <hr style={{ width: \"60%\" }} />\n                <hr style={{ width: \"80%\" }} />\n                <hr />\n                <Link to={process.env.PUBLIC_URL + \"/\"}></Link>\n                <ul>\n                  <li>\n                    <Link\n                      to={process.env.PUBLIC_URL + \"/Air-Bender-Api-Info\"}\n                      style={{ color: \"gray\", fontSize: \"xx-large\" }}\n                    >\n                      The Last Airbender API\n                    </Link>\n                  </li>\n                  <li>\n                    <Link\n                      to={process.env.PUBLIC_URL + \"/Poke-A-Lama-Info\"}\n                      style={{ color: \"gray\", fontSize: \"xx-large\" }}\n                    >\n                      Poke A Lama\n                    </Link>\n                  </li>\n                </ul>\n                <hr />\n                <hr style={{ width: \"80%\" }} />\n                <hr style={{ width: \"60%\" }} />\n                <hr style={{ width: \"40%\" }} />\n                <hr style={{ width: \"20%\" }} />\n              </div>\n            </Col>\n          </Route>\n        </BrowserRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}